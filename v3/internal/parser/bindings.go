package parser

import (
	"fmt"
	"slices"
	"sort"
	"strconv"
	"strings"

	"github.com/samber/lo"
)

const header = `// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

`

const headerTypescript = `// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

`

const bindingTemplate = `
/**
 * Comments
 * @function {{methodName}}
 * @param {types} names
 * @returns {Promise<string>}
 **/
`
const bindingTemplateTypescript = `
Comments
`

const callByIDTypescript = `export async function {{methodName}}({{inputs}}) : {{ReturnType}} {
	return Call.ByID({{ID}}{{args}});
}
`

const callByNameTypescript = `export async function {{methodName}}({{inputs}}) : {{ReturnType}} {
	return Call.ByName("{{Name}}"{{args}});
}
`

const callByID = `export async function {{methodName}}({{inputs}}) {
	return Call.ByID({{ID}}{{args}});
}
`

const callByName = `export async function {{methodName}}({{inputs}}) {
	return Call.ByName("{{Name}}"{{args}});
}
`

var reservedWords = []string{
	"abstract",
	"arguments",
	"await",
	"boolean",
	"break",
	"byte",
	"case",
	"catch",
	"char",
	"class",
	"const",
	"continue",
	"debugger",
	"default",
	"delete",
	"do",
	"double",
	"else",
	"enum",
	"eval",
	"export",
	"extends",
	"false",
	"final",
	"finally",
	"float",
	"for",
	"function",
	"goto",
	"if",
	"implements",
	"import",
	"in",
	"instanceof",
	"int",
	"interface",
	"let",
	"long",
	"native",
	"new",
	"null",
	"package",
	"private",
	"protected",
	"public",
	"return",
	"short",
	"static",
	"super",
	"switch",
	"synchronized",
	"this",
	"throw",
	"throws",
	"transient",
	"true",
	"try",
	"typeof",
	"var",
	"void",
	"volatile",
	"while",
	"with",
	"yield",
	"object",
}

func sanitiseJSVarName(index int, name string) string {
	// identifiers in Go may not start with a dollar sign, but this is allowed
	// in JS, meaning that we can avoid collisions by prefixing all generated
	// identifiers with dollar signs

	// if the name is empty or an underscore, return a dollar sign followed by argument index
	if name == "" || name == "_" {
		return "$" + strconv.Itoa(index)
	}

	// if the name is a reserved word, prefix with a dollar sign
	if slices.Contains(reservedWords, name) {
		return "$" + name
	}

	return name
}

type ExternalStruct struct {
	Package string
	Name    string
}

func (p *Project) GenerateBinding(thisStructName string, method *BoundMethod, useIDs bool) (string, map[packagePath]map[string]*ExternalStruct) {
	var externalStructs = make(map[packagePath]map[string]*ExternalStruct)

	template := bindingTemplate
	if useIDs {
		template += callByID
	} else {
		template += callByName
	}

	result := strings.ReplaceAll(template, "{{structName}}", thisStructName)
	result = strings.ReplaceAll(result, "{{methodName}}", method.Name)
	result = strings.ReplaceAll(result, "{{ID}}", fmt.Sprintf("%v", method.ID))

	// get last part of method.Package path
	parts := strings.Split(method.Package, "/")
	packageName := parts[len(parts)-1]

	result = strings.ReplaceAll(result, "{{Name}}", fmt.Sprintf("%v.%v.%v", packageName, thisStructName, method.Name))

	comments := strings.TrimSpace(method.DocComment)
	comments = strings.ReplaceAll(comments, "*/", "*\\/")
	comments = strings.ReplaceAll(comments, "\n", "\n * ")
	if comments != "" {
		comments = "\n * " + comments
	}
	result = strings.ReplaceAll(result, "\n * Comments", comments)

	var params, inputs, args string
	for index, input := range method.JSInputs() {
		input.project = p

		if input.Type.IsStruct || input.Type.IsEnum {
			if _, ok := externalStructs[input.Type.Package]; !ok {
				externalStructs[input.Type.Package] = make(map[string]*ExternalStruct)
			}
			externalStructs[input.Type.Package][input.Type.Name] = &ExternalStruct{
				Package: input.Type.Package,
				Name:    input.Type.Name,
			}
		}

		inputName := sanitiseJSVarName(index, input.Name)
		inputType := input.JSType(method.Package)

		params += "\n * @param {" + inputType + "} " + inputName

		if input.Type.IsVariadic {
			inputs += "..."
		}
		inputs += inputName + ", "

		args += ", " + inputName
	}

	params = strings.TrimSuffix(params, "\n")
	result = strings.ReplaceAll(result, "\n * @param {types} names", params)

	inputs = strings.TrimSuffix(inputs, ", ")
	result = strings.ReplaceAll(result, "{{inputs}}", inputs)

	result = strings.ReplaceAll(result, "{{args}}", args)

	// outputs
	var returns string
	if len(method.Outputs) == 0 {
		returns = " * @returns {Promise<void>}"
	} else {
		returns = " * @returns {Promise<"
		for _, output := range method.Outputs {
			output.project = p

			if output.Type.IsStruct || output.Type.IsEnum {
				if _, ok := externalStructs[output.Type.Package]; !ok {
					externalStructs[output.Type.Package] = make(map[string]*ExternalStruct)
				}
				externalStructs[output.Type.Package][output.Type.Name] = &ExternalStruct{
					Package: output.Type.Package,
					Name:    output.Type.Name,
				}
			}

			outputType := output.JSType(method.Package)
			if outputType == "error" {
				returns += "void, "
			} else {
				returns += outputType + ", "
			}
		}

		returns = strings.TrimSuffix(returns, ", ")
		returns += ">}"
	}
	result = strings.ReplaceAll(result, " * @returns {Promise<string>}", returns)

	return result, externalStructs
}

func (p *Project) GenerateBindingTypescript(thisStructName string, method *BoundMethod, useIDs bool) (string, map[packagePath]map[string]*ExternalStruct) {
	var externalStructs = make(map[packagePath]map[string]*ExternalStruct)

	template := bindingTemplateTypescript
	if useIDs {
		template += callByIDTypescript
	} else {
		template += callByNameTypescript
	}

	result := strings.ReplaceAll(template, "{{structName}}", thisStructName)
	result = strings.ReplaceAll(result, "{{methodName}}", method.Name)
	result = strings.ReplaceAll(result, "{{ID}}", fmt.Sprintf("%v", method.ID))

	// get last part of method.Package path
	parts := strings.Split(method.Package, "/")
	packageName := parts[len(parts)-1]

	result = strings.ReplaceAll(result, "{{Name}}", fmt.Sprintf("%v.%v.%v", packageName, thisStructName, method.Name))

	comments := strings.TrimSpace(method.DocComment)
	comments = strings.ReplaceAll(comments, "*/", "*\\/")
	comments = strings.ReplaceAll(comments, "\n", "\n * ")
	if comments != "" {
		comments = "/**\n * " + comments + "\n */"
	}
	result = strings.ReplaceAll(result, "Comments", comments)

	var inputs, args string
	for index, input := range method.JSInputs() {
		input.project = p

		if input.Type.IsStruct || input.Type.IsEnum {
			if _, ok := externalStructs[input.Type.Package]; !ok {
				externalStructs[input.Type.Package] = make(map[string]*ExternalStruct)
			}
			externalStructs[input.Type.Package][input.Type.Name] = &ExternalStruct{
				Package: input.Type.Package,
				Name:    input.Type.Name,
			}
		}

		inputName := sanitiseJSVarName(index, input.Name)
		inputType := input.JSType(method.Package)

		if input.Type.IsVariadic {
			inputs += "..."
		}
		inputs += inputName + ": " + inputType + ", "

		args += ", " + inputName
	}

	inputs = strings.TrimSuffix(inputs, ", ")
	result = strings.ReplaceAll(result, "{{inputs}}", inputs)

	result = strings.ReplaceAll(result, "{{args}}", args)

	// outputs
	var returns string
	if len(method.Outputs) == 0 {
		returns = "Promise<void>"
	} else {
		returns = "Promise<"
		for _, output := range method.Outputs {
			output.project = p

			if output.Type.IsStruct || output.Type.IsEnum {
				if _, ok := externalStructs[output.Type.Package]; !ok {
					externalStructs[output.Type.Package] = make(map[string]*ExternalStruct)
				}
				externalStructs[output.Type.Package][output.Type.Name] = &ExternalStruct{
					Package: output.Type.Package,
					Name:    output.Type.Name,
				}
			}

			outputType := output.JSType(method.Package)
			if outputType == "error" {
				returns += "void, "
			} else {
				returns += outputType + ", "
			}
		}
		returns = strings.TrimSuffix(returns, ", ")
		returns += ">"
	}
	result = strings.ReplaceAll(result, "{{ReturnType}}", returns)

	return result, externalStructs
}

func isContext(input *Parameter) bool {
	return input.Type.Package == "context" && input.Type.Name == "Context"
}

func (p *Project) GenerateBindings(bindings map[string]map[string][]*BoundMethod, modelsFilename string, useIDs bool, useTypescript bool, useBundledRuntime bool) map[string]map[string]string {

	var result = make(map[string]map[string]string)

	// sort the bindings keys
	packageNames := lo.Keys(bindings)
	sort.Strings(packageNames)
	for _, packageName := range packageNames {
		packageBindings := bindings[packageName]
		structNames := lo.Keys(packageBindings)
		relativePackageDir := p.RelativePackageDir(packageName)
		_ = relativePackageDir
		sort.Strings(structNames)
		for _, structName := range structNames {
			if _, ok := result[relativePackageDir]; !ok {
				result[relativePackageDir] = make(map[string]string)
			}
			methods := packageBindings[structName]
			sort.Slice(methods, func(i, j int) bool {
				return methods[i].Name < methods[j].Name
			})
			var allNamespacedStructs map[packagePath]map[string]*ExternalStruct
			var namespacedStructs map[packagePath]map[string]*ExternalStruct
			var thisBinding string
			var mainImports = ""
			if len(methods) > 0 {
				if useBundledRuntime {
					mainImports = "import {Call} from '/wails/runtime.js';\n"
				} else {
					mainImports = "import {Call} from '@wailsio/runtime';\n"
				}
			}
			for _, method := range methods {
				if useTypescript {
					thisBinding, namespacedStructs = p.GenerateBindingTypescript(structName, method, useIDs)
				} else {
					thisBinding, namespacedStructs = p.GenerateBinding(structName, method, useIDs)
				}
				// Merge the namespaced structs
				allNamespacedStructs = mergeNamespacedStructs(allNamespacedStructs, namespacedStructs)
				result[relativePackageDir][structName] += thisBinding
			}

			if len(allNamespacedStructs) > 0 {
				thisPkg := p.packageCache[packageName]
				if !useTypescript {
					typedefs := "/**\n"
					for externalPackageName, namespacedStruct := range allNamespacedStructs {
						pkgInfo := p.packageCache[externalPackageName]
						relativePackageDir := p.RelativeBindingsDir(thisPkg, pkgInfo)
						namePrefix := ""
						if pkgInfo.Name != "" && pkgInfo.Path != thisPkg.Path {
							namePrefix = pkgInfo.Name
						}

						// Get keys from namespacedStruct and iterate over them in sorted order
						namespacedStructNames := lo.Keys(namespacedStruct)
						sort.Strings(namespacedStructNames)
						for _, thisStructName := range namespacedStructNames {
							structInfo := namespacedStruct[thisStructName]
							typedefs += " * @typedef {import('" + relativePackageDir + "/" + modelsFilename + "')." + thisStructName + "} " + namePrefix + structInfo.Name + "\n"
						}
					}
					typedefs += " */\n"
					result[relativePackageDir][structName] = typedefs + result[relativePackageDir][structName]
				} else {
					// Generate imports instead of typedefs
					imports := ""
					for externalPackageName, namespacedStruct := range allNamespacedStructs {
						pkgInfo := p.packageCache[externalPackageName]
						relativePackageDir := p.RelativeBindingsDir(thisPkg, pkgInfo)
						namePrefix := ""
						if pkgInfo.Name != "" && pkgInfo.Path != thisPkg.Path {
							namePrefix = pkgInfo.Name
						}

						// Get keys from namespacedStruct and iterate over them in sorted order
						namespacedStructNames := lo.Keys(namespacedStruct)
						sort.Strings(namespacedStructNames)
						for _, thisStructName := range namespacedStructNames {
							structInfo := namespacedStruct[thisStructName]
							if namePrefix != "" {
								imports += "import {" + thisStructName + " as " + namePrefix + structInfo.Name + "} from '" + relativePackageDir + "/models';\n"
							} else {
								imports += "import {" + thisStructName + "} from '" + relativePackageDir + "/" + modelsFilename + "';\n"
							}
						}
					}
					result[relativePackageDir][structName] = imports + result[relativePackageDir][structName]
				}
			}
			if useTypescript {
				result[relativePackageDir][structName] = headerTypescript + mainImports + result[relativePackageDir][structName]
			} else {
				result[relativePackageDir][structName] = header + mainImports + result[relativePackageDir][structName]
			}
		}
	}

	return result
}

func mergeNamespacedStructs(structs map[packagePath]map[string]*ExternalStruct, structs2 map[packagePath]map[string]*ExternalStruct) map[packagePath]map[string]*ExternalStruct {
	if structs == nil {
		structs = make(map[packagePath]map[string]*ExternalStruct)
	}
	for pkg, pkgStructs := range structs2 {
		if _, ok := structs[pkg]; !ok {
			structs[pkg] = make(map[string]*ExternalStruct)
		}
		for name, structInfo := range pkgStructs {
			structs[pkg][name] = structInfo
		}
	}
	return structs
}
