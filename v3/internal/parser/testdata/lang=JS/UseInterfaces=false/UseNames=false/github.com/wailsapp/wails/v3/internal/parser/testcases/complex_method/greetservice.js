// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * GreetService is great
 * @module
 */

import {Call as $Call, Types as $Types} from "/wails/runtime.js";

import * as $models from "./models.js";

/**
 * Greet does XYZ
 * It has a multiline doc comment
 * The comment has even some * / traps!!
 * @param {string} str
 * @param {$models.Person[]} people
 * @param {{"AnotherCount": number, "AnotherOne": $models.Person | null}} $2
 * @param {{ [_: `${number}`]: boolean | null }} assoc
 * @param {(number | null)[]} $4
 * @param {string[]} other
 * @returns {Promise<[$models.Person, any, number[]]> & { cancel(): void }}
 */
export function Greet(str, people, $2, assoc, $4, ...other) {
    let $resultPromise = /** @type {any} */($Call.ByID(1411160069, str, people, $2, $$garbleType0(assoc), $4, other));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        $result[0] = $$createType1($result[0]);
        $result[2] = $$createType2($result[2]);
        return $result;
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.Person.createFrom;
const $$createType1 = $Types.CreateArray($Types.CreateAny);

// Private type garbling functions
const $$garbleType0 = $Types.GarbleMap($Types.GarbleAny, $Types.GarbleAny);
