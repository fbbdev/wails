{{$module := .}}
{{- $runtime := $module.Runtime}}
{{- $models := $module.ModelsFile}}
{{- $internal := $module.InternalFile}}
{{- $useInterfaces := .UseInterfaces}}
{{- $imports := $module.Imports -}}
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

import {Create as $Create} from "{{js $runtime}}";
{{range $imports.External}}
import * as {{jsimport .}} from "{{js .RelPath}}/{{js $models}}";
{{- end}}{{if $imports.External}}
{{end}}
{{- if $imports.Models}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Models}}
        {{- if not $first}}, {{end}}{{$first = false}}
        {{- if or $useInterfaces (not $class)}}type {{end}}{{jsid $model}}
    {{- end -}}
} from "./{{js $models}}";
{{end}}
{{- if $imports.Internal}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Internal}}
        {{- if not $first}}, {{end}}{{$first = false}}
        {{- if or $useInterfaces (not $class)}}type {{end}}{{jsid $model}}
    {{- end -}}
} from "./{{js $internal}}";
{{end}}
{{- range $model := .Models}}

{{- $isEnum := $model.Values}}
{{- $isClassAlias := and $model.Type (isclass $model.Type)}}
{{- $isTypeAlias := and $model.Type (not (isclass $model.Type))}}
{{- $isClassOrInterface := $model.Fields}}
{{- $isInterface := or $useInterfaces $model.Alias}}

{{- /* Build type parameter list */}}
{{- $typeParamList := ""}}
{{- range $i, $param := $model.TypeParams}}
    {{- if or (eq $param "") (eq $param "_")}}
        {{- $param = (printf "T$$%d" $i)}}
    {{- end}}
    {{- $param = (jsid $param)}}
    {{- if eq $i 0}}
        {{- $typeParamList = (printf "<%s" $param)}}
    {{- else}}
        {{- $typeParamList = (printf "%s, %s" $typeParamList $param)}}
    {{- end}}
{{- end}}
{{- if $typeParamList}}
    {{- $typeParamList = (printf "%s>" $typeParamList)}}
{{- end}}

{{- if or $model.Group.Doc $model.Doc}}
/**
{{- if $model.Group.Doc}}
{{- jsdoc $model.Group.Doc.Text ""}}{{if $model.Doc}}
 *{{end}}
{{- end}}
{{- if $model.Doc}}
{{- jsdoc $model.Doc.Text ""}}
{{- end}}
 */
{{- end}}
{{- if $isEnum}}
export enum {{jsid $model.Name}} {
    {{- range $i, $group := $model.Values}}{{range $j, $sgroup := $group}}{{range $k, $value := $sgroup}}
    {{- if and (ne $i 0) (ne $j 0) (eq $k 0)}}
{{end}}
    {{- if or (and (eq $j 0) (eq $k 0) $value.Group.Group.Doc) (and (eq $k 0) $value.Group.Doc) $value.Doc}}
    {{- if or (gt $j 0) (gt $k 0)}}
{{end}}
    /**
    {{- if and (eq $j 0) (eq $k 0) $value.Group.Group.Doc}}
    {{- jsdoc $value.Group.Group.Doc.Text "    "}}{{if or (and (eq $k 0) $value.Group.Doc) $value.Doc}}
     *{{end}}
    {{- end}}
    {{- if and (eq $k 0) $value.Group.Doc}}
    {{- jsdoc $value.Group.Doc.Text "    "}}{{if $value.Doc}}
     *{{end}}
    {{- end}}
    {{- if $value.Doc}}
    {{- jsdoc $value.Doc.Text "    "}}
    {{- end}}
     */
    {{- end}}
    {{jsid $value.Name}} = {{jsvalue $value.Value}},
    {{- end}}{{end}}{{end}}
};
{{else if $isClassAlias}}
export const {{jsid $model.Name}} = {{$module.JSType $model.Type}};
{{else if $isTypeAlias}}
export type {{jsid $model.Name}}{{$typeParamList}} = {{$module.JSType $model.Type}};
{{else if $isClassOrInterface}}
export {{if $isInterface}}interface{{else}}class{{end}} {{jsid $model.Name}}{{$typeParamList}} {
    {{- range $i, $group := $model.Fields}}{{range $j, $field := $group}}
    {{- if and (ne $i 0) (eq $j 0)}}
{{end}}
    {{- if or (and (eq $j 0) $field.Group.Doc) $field.Doc}}
    {{- if gt $j 0}}
{{end}}
    /**
    {{- if and (eq $j 0) $field.Group.Doc}}
    {{- jsdoc $field.Group.Doc.Text "    "}}{{if $field.Doc}}
     *{{end}}
    {{- end}}
    {{- if $field.Doc}}
    {{- jsdoc $field.Doc.Text "    "}}
    {{- end}}
     */
    {{- end}}
    "{{js $field.Name}}"{{if $field.Optional}}?{{end}}: {{$module.JSFieldType $field.FieldInfo}};
    {{- end}}{{end}}
{{- if not $isInterface}}

    /** Creates a new {{jsid $model.Name}} instance. */
    constructor($$source: Partial<{{jsid $model.Name}}{{$typeParamList}}> = {}) {
    {{- range $group := $model.Fields}}{{range $i, $field := $group}}{{if not .Optional}}
        if (!("{{js $field.Name}}" in $$source)) {
            this["{{js $field.Name}}"] = {{$module.JSDefault $field.Type $field.Quoted}};
        }
    {{- end}}{{end}}{{end}}

        Object.assign(this, $$source);
    }

    /**
     * Creates a new {{jsid $model.Name}} instance from a string or object.
     * Generic types also need creation functions for each type parameter.
     */
    static createFrom{{$typeParamList}}(
            {{- range $i, $param := $model.TypeParams}}
                {{- if or (eq $param "") (eq $param "_")}}
                    {{- $param = (printf "T$$%d" $i)}}
                {{- end}}
                {{- $param = (jsid $param) -}}
                $$create{{$param}}: (any) => {{$param}}, {{end -}}
            $$source: any = {}): {{jsid $model.Name}}{{$typeParamList}} {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        {{- range $i, $group := $model.Fields}}{{range $j, $field := $group}}
        {{- $create := ($module.JSCreate $field.Type)}}
        {{- if ne $create "$Create.Any"}}
        if ("{{js $field.Name}}" in $$parsedSource) {
            $$parsedSource["{{js $field.Name}}"] = {{$create}}($$parsedSource["{{js $field.Name}}"]);
        }
        {{- end}}
        {{- end}}{{end}}
        return new {{jsid $model.Name}}{{$typeParamList}}($$parsedSource as Partial<{{jsid $model.Name}}{{$typeParamList}}>);
    }
{{- end}}
}
{{end}}
{{- end}}
{{- $postponed := $module.PostponedCreates}}
{{- if $postponed}}
// Internal type creation functions
{{- range $i, $create := $postponed}}
const $$createType{{$i}} = {{$create}};
{{- end}}
{{end -}}
