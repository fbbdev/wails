{{$module := .}}
{{- $runtime := $module.Runtime}}
{{- $models := $module.ModelsFile}}
{{- $internal := $module.InternalFile}}
{{- $useNames := $module.UseNames}}
{{- $useInterfaces := $module.UseInterfaces}}
{{- $imports := $module.Imports}}
{{- with .BoundType -}}
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
{{- if or .Group.Doc .Doc}}

/**
{{- if .Group.Doc}}
{{- jsdoc .Group.Doc.Text ""}}{{if .Doc}}
 *{{end}}
{{- end}}
{{- if .Doc}}
{{- jsdoc .Doc.Text ""}}
{{- end}}
 * @module
 */
{{- end}}

import {Call as $Call, Create as $Create} from "{{js $runtime}}";
{{range $imports.External}}
import * as {{jsimport .}} from "{{js .RelPath}}/{{js $models}}";
{{- end}}{{if $imports.External}}
{{end}}
{{- if $imports.Models}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Models}}
        {{- if not $first}}, {{end}}{{$first = false}}
        {{- if or $useInterfaces (not $class)}}type {{end}}{{jsid $model}}
    {{- end -}}
} from "./{{js $models}}";
{{end}}
{{- if $imports.Internal}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Internal}}
        {{- if not $first}}, {{end}}{{$first = false}}
        {{- if or $useInterfaces (not $class)}}type {{end}}{{jsid $model}}
    {{- end -}}
} from "./{{js $internal}}";
{{end}}
{{- range .Methods}}
{{- if .Doc}}
/**
{{- jsdoc .Doc.Text ""}}
 */
{{- end}}
export function {{.Name}}({{range $i, $param := .Params -}}
    {{- if gt $i 0}}, {{end}}
    {{- if .Variadic}}...{{end}}
    {{- jsparam $i .}}: {{$module.JSType .Type}}
{{- end}}): Promise<
    {{- if eq 0 (len .Results) -}}
        void
    {{- else if eq 1 (len .Results)}}
        {{- $module.JSType (index .Results 0)}}
    {{- else -}}
        [{{range $i, $result := .Results}}
            {{- if gt $i 0}}, {{end}}
            {{- $module.JSType $result}}
        {{- end}}]
    {{- end}}> {
    {{- if $useNames}}
    let $resultPromise = $Call.ByName("{{js .FQN}}"
    {{- else}}
    let $resultPromise = $Call.ByID({{.ID}}
    {{- end}}{{range $i, $param := .Params}}, {{jsparam $i .}}{{end}});
    {{- if or $useInterfaces (not .Results) ($module.SkipCreate .Results)}}
    return $resultPromise as any;
    {{- else}}
    let $typingPromise = $resultPromise.then(($result) => {
    {{- if eq 1 (len .Results)}}
        return {{$module.JSCreate (index .Results 0)}}($result);
    {{- else}}
        {{- range $i, $type := .Results}}
        {{- $create := ($module.JSCreate $type)}}
        {{- if ne $create "$Create.Any"}}
        $result[{{$i}}] = {{$create}}($result[{{$i}}]);
        {{- end}}{{end}}
        return $result;
    {{- end}}
    });
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise as any;
    {{- end}}
}
{{end}}
{{- $postponed := $module.PostponedCreates}}
{{- if $postponed}}
// Internal type creation functions
{{- range $i, $create := $postponed}}
const $$createType{{$i}} = {{$create}};
{{- end}}
{{end}}{{end -}}
