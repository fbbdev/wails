// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
{{- if or .Group.Doc .Doc}}

/**
{{- if .Group.Doc}}
{{- jsdoc .Group.Doc.Text ""}}{{if .Doc}}
 *{{end}}
{{- end}}
{{- if .Doc}}
{{- jsdoc .Doc.Text ""}}
{{- end}}
 * @module
 */
{{- end}}

import {Call as $Call} from {{if .UseBundledRuntime}}"/wails/runtime.js"{{else}}"@wailsio/runtime"{{end}};
{{$models := .ModelsFile}}
{{- $internal := .InternalFile}}
{{- $useNames := .UseNames}}
{{- $useInterfaces := .UseInterfaces}}
{{- $imports := .Imports}}
{{- $collector := .Collector}}
{{- range $imports.External}}
import * as {{jsimport .}} from "{{.RelPath}}/{{$models}}";
{{- end}}{{if $imports.External}}
{{end}}
{{- if $imports.Models}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Models}}
        {{- if not $first}}, {{end}}{{$first = false}}
        {{- if or $useInterfaces (not $class)}}type {{end}}{{jsid $model}}
    {{- end -}}
} from "./{{$models}}";
{{end}}
{{- if $imports.Internal}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Internal}}
        {{- if not $first}}, {{end}}{{$first = false}}
        {{- if or $useInterfaces (not $class)}}type {{end}}{{jsid $model}}
    {{- end -}}
} from "./{{$internal}}";
{{end}}
{{- range .Methods}}
{{- if .Doc}}
/**
{{- jsdoc .Doc.Text ""}}
 */
{{- end}}
export function {{.Name}}({{range $i, $param := .Params -}}
    {{- if gt $i 0}}, {{end}}
    {{- if .Variadic}}...{{end}}
    {{- jsparam $i .}}: {{jstype .Type $imports $collector}}
{{- end}}): Promise<
    {{- if eq 0 (len .Results) -}}
        void
    {{- else if eq 1 (len .Results)}}
        {{- jstype (index .Results 0) $imports $collector}}
    {{- else -}}
        [{{range $i, $result := .Results}}
            {{- if gt $i 0}}, {{end}}
            {{- jstype .Type $imports $collector}}
        {{- end}}]
    {{- end}}> {
    {{- if $useNames}}
    let $resultPromise = $Call.ByName("{{js .FQN}}"
    {{- else}}
    let $resultPromise = $Call.ByID({{.ID}}
    {{- end}}{{range $i, $param := .Params}}, {{jsparam $i .}}{{end}});
    {{- if or $useInterfaces (not .Results)}}
    return /** @type {any} */($resultPromise);
    {{- else}}
    let $typingPromise = $resultPromise.then(($result) => {
    {{- if eq 1 (len .Results)}}
        {{- jscreate "" "$result" "$result" (index .Results 0) $imports $collector false true "        "}}
    {{- else}}{{range $i, $type := .Results}}
        {{- $tgt := (printf "$result[%d]" $i)}}
        {{- jscreate "" $tgt $tgt $type $imports $collector false true "        "}}
    {{- end}}{{end}}
        return $result;
    });
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return /** @type {any} */($typingPromise);
    {{- end}}
}
{{end -}}
