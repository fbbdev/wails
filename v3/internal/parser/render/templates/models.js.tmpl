{{$module := .}}
{{- $runtime := $module.Runtime}}
{{- $models := $module.ModelsFile}}
{{- $internal := $module.InternalFile}}
{{- $useInterfaces := .UseInterfaces}}
{{- $imports := $module.Imports -}}
// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

import {Create as $Create} from "{{js $runtime}}";
{{range $imports.External}}
import * as {{jsimport .}} from "{{js .RelPath}}/{{js $models}}";
{{- end}}{{if $imports.External}}
{{end}}
{{- if $imports.ImportModels}}
import * as $models from "./{{js $models}}";{{if not $imports.ImportInternal}}
{{end}}{{end}}
{{- if $imports.ImportInternal}}
import * as $internal from "./{{js $internal}}";
{{end}}
{{- range $model := .Models}}

{{- $isEnum := $model.Values}}
{{- $isClassAlias := and $model.Type (not $useInterfaces) (isclass $model.Type)}}
{{- $isTypeAlias := and $model.Type (or $useInterfaces (not (isclass $model.Type)))}}
{{- $isClassOrInterface := $model.Fields}}
{{- $isInterface := and $isClassOrInterface (or $useInterfaces $model.Alias)}}

{{- /* Build type parameter list */}}
{{- $typeParams := ""}}
{{- $typeParamList := ""}}
{{- $createParamList := ""}}
{{- range $i, $param := $model.TypeParams}}
    {{- $param = (typeparam $i $param)}}
    {{- if eq $i 0}}
        {{- $typeParams = $param}}
        {{- $typeParamList = (printf "<%s" $param)}}
        {{- $createParamList = (printf "($$createParam%s" $param)}}
    {{- else}}
        {{- $typeParams = (printf "%s,%s" $typeParams $param)}}
        {{- $typeParamList = (printf "%s, %s" $typeParamList $param)}}
        {{- $createParamList = (printf "%s, $$createParam%s" $createParamList $param)}}
    {{- end}}
{{- end}}
{{- if $typeParamList}}
    {{- $typeParamList = (printf "%s>" $typeParamList)}}
    {{- $createParamList = (printf "%s)" $createParamList)}}
{{- end}}

{{- if or $typeParamList $model.Group.Doc $model.Doc $isEnum $isTypeAlias $isInterface}}
/**
{{- if $model.Group.Doc}}
{{- jsdoc $model.Group.Doc.Text ""}}{{if $model.Doc}}
 *{{end}}
{{- end}}
{{- if $model.Doc}}
{{- jsdoc $model.Doc.Text ""}}
{{- end}}
{{- if $typeParamList}}
 * @template {{$typeParams}}
{{- end}}
{{- if $isEnum}}
 * @readonly
 * @enum { {{- $module.JSType $model.Type -}} }
{{- else if $isClassAlias}}
 * @extends { {{- $module.JSType $model.Type -}} }
{{- else if $isTypeAlias}}
 * @typedef { {{- $module.JSType $model.Type -}} } {{jsid $model.Name}}
{{- else if $isInterface}}
 * @typedef { {
{{- range $i, $group := $model.Fields}}{{range $j, $field := $group}}
 *     "{{js $field.Name}}"{{if $field.Optional}}?{{end}}: {{$module.JSFieldType $field.FieldInfo}},
{{- end}}{{end}}
 * } } {{jsid $model.Name}}
{{- end}}
 */
{{- end}}
{{- if $isEnum}}
export const {{jsid $model.Name}} = {
    {{- range $i, $group := $model.Values}}{{range $j, $sgroup := $group}}{{range $k, $value := $sgroup}}
    {{- if and (ne $i 0) (eq $j 0) (eq $k 0)}}
{{end}}
    {{- if or (and (eq $j 0) (eq $k 0) $value.Group.Group.Doc) (and (eq $k 0) $value.Group.Doc) $value.Doc}}
    {{- if or (gt $j 0) (gt $k 0)}}
{{end}}
    /**
    {{- if and (eq $j 0) (eq $k 0) $value.Group.Group.Doc}}
    {{- jsdoc $value.Group.Group.Doc.Text "    "}}{{if or (and (eq $k 0) $value.Group.Doc) $value.Doc}}
     *{{end}}
    {{- end}}
    {{- if and (eq $k 0) $value.Group.Doc}}
    {{- jsdoc $value.Group.Doc.Text "    "}}{{if $value.Doc}}
     *{{end}}
    {{- end}}
    {{- if $value.Doc}}
    {{- jsdoc $value.Doc.Text "    "}}
    {{- end}}
     */
    {{- end}}
    {{jsid $value.Name}}: {{jsvalue $value.Value}},
    {{- end}}{{end}}{{end}}
};
{{else if $isClassAlias}}
export class {{jsid $model.Name}} extends {{$module.JSType $model.Type.Origin}} {
    /**
     * Creates a new {{jsid $model.Name}} instance.
     * @param {Partial<{{jsid $model.Name}}{{$typeParamList}}>} [$$source = {}] - The source object to create the {{jsid $model.Name}}.
     */
    constructor($$source = {}) {
        super($$source);
    }

    /**
    {{- if $typeParamList}}
     * Given creation functions for each type parameter,
     * returns a creation function for a concrete instance
     * of the generic class {{jsid $model.Name}}.
     * @template {{$typeParams}}
    {{- range $i, $param := $model.TypeParams}}
        {{- $param = (typeparam $i $param)}}
     * @param {(any) => {{$param -}} } $$createParam{{$param}}
    {{- end}}
     * @returns {($$source?: any, $$class?: any) => any }
    {{- else}}
     * Creates a new {{jsid $model.Name}} instance from a string or object.
     * @param {any} [$$source = {}]
     * @param {any} [$$class = {{jsid $model.Name}}]
     * @returns {any}
    {{- end}}
     */
    static createFrom{{if $typeParamList}}{{$createParamList}}{{else}}($$source = {}, $$class = {{jsid $model.Name}}){{end}} {
        const $$createSuper = {{$module.JSCreateWithParams $model.Type $createParamList}};
        return {{if $typeParamList -}}
            ($$source = {}, $$class = {{jsid $model.Name}}) => {{end -}}
                $$createSuper($$source, $$class);
    }
}
{{else if and $isClassOrInterface (not $isInterface)}}
export class {{jsid $model.Name}} {
    /**
     * Creates a new {{jsid $model.Name}} instance.
     * @param {Partial<{{jsid $model.Name}}{{$typeParamList}}>} [$$source = {}] - The source object to create the {{jsid $model.Name}}.
     */
    constructor($$source = {}) {
    {{- range $group := $model.Fields}}{{range $i, $field := $group}}
        {{- /*
            In JS we need to set all properties explicitly
            because JSDoc has no support for arbitrary property names yet.
            See https://github.com/jsdoc/jsdoc/issues/1468

            For optional fields we make the initialization code unreachable
            and cast the false condition to any to prevent any complaint from Typescript.
        */}}
        if ({{if $field.Optional}}/** @type {any} */(false){{else}}!("{{js $field.Name}}" in $$source){{end}}) {
            /**
            {{- if and (eq $i 0) $field.Group.Doc}}
            {{- jsdoc $field.Group.Doc.Text "            "}}{{if $field.Doc}}
             *{{end}}
            {{- end}}
            {{- if $field.Doc}}
            {{- jsdoc $field.Doc.Text "            "}}
            {{- end}}
             * @member
             * @type { {{- $module.JSFieldType $field.FieldInfo}}{{if .Optional}} | undefined{{end -}} }
             */
            this["{{js $field.Name}}"] = {{$module.JSDefault $field.Type $field.Quoted}};
        }
    {{- end}}{{end}}

        Object.assign(this, $$source);
    }

    /**
    {{- if $typeParamList}}
     * Given creation functions for each type parameter,
     * returns a creation function for a concrete instance
     * of the generic class {{jsid $model.Name}}.
     * @template {{$typeParams}}
    {{- range $i, $param := $model.TypeParams}}
        {{- $param = (typeparam $i $param)}}
     * @param {(any) => {{$param -}} } $$createParam{{$param}}
    {{- end}}
     * @returns {($$source?: any, $$class?: any) => {{jsid $model.Name}}{{$typeParamList -}} }
    {{- else}}
     * Creates a new {{jsid $model.Name}} instance from a string or object.
     * @param {any} [$$source = {}]
     * @param {any} [$$class = {{jsid $model.Name}}]
     * @returns { {{- jsid $model.Name -}} }
    {{- end}}
     */
    static createFrom{{if $typeParamList}}{{$createParamList}}{{else}}($$source = {}, $$class = {{jsid $model.Name}}){{end}} {
        {{- range $i, $group := $model.Fields}}{{range $j, $field := $group}}
            {{- $create := ($module.JSCreateWithParams $field.Type $createParamList)}}
            {{- if ne $create "$Create.Any"}}
        const $$createField{{$i}}_{{$j}} = {{$create}};
            {{- end}}
        {{- end}}{{end}}
        {{- $indent := ""}}
        {{- if $typeParamList}}
            {{- $indent = "    "}}
        return ($$source = {}, $$class = {{jsid $model.Name}}) => {
        {{- end}}
        {{$indent}}let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        {{- range $i, $group := $model.Fields}}{{range $j, $field := $group}}
            {{- if $module.NeedsCreate $field.Type}}
        {{$indent}}if ("{{js $field.Name}}" in $$parsedSource) {
        {{$indent}}    $$parsedSource["{{js $field.Name}}"] = $$createField{{$i}}_{{$j}}($$parsedSource["{{js $field.Name}}"]);
        {{$indent -}} }
            {{- end}}
        {{- end}}{{end}}
        {{$indent}}return new $$class(/** @type {Partial<{{jsid $model.Name}}{{$typeParamList}}>} */($$parsedSource));
        {{- if $typeParamList}}
        };
        {{- end}}
    }
}
{{else}}
{{- /* Rendered as a @typedef */}}
{{end}}
{{- end}}
{{- $postponed := $module.PostponedCreates}}
{{- if $postponed}}
// Private type creation functions
{{- range $i, $create := $postponed}}
const $$createType{{$i}} = {{$create}};
{{- end}}
{{end -}}
