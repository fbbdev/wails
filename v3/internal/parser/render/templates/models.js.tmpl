// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
{{$models := .ModelsFile}}
{{- $internal := .InternalFile}}
{{- $imports := .Imports}}
{{- $collector := .Collector}}
{{- range $imports.External}}
import * as {{jsimport .}} from "{{.RelPath}}/{{$models}}";
{{- end}}{{if $imports.External}}
{{end}}
{{- if $imports.Models}}
{{- $typedefs := false}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Models}}
        {{- if $class}}
            {{- if not $first}}, {{end}}{{$first = false}}
            {{- jsid $model}}
        {{- else}}
            {{- $typedefs = true}}
        {{- end}}
    {{- end -}}
} from "./{{$models}}";
{{- if $typedefs}}

{{range $model, $class := $imports.Models}}{{if not $class}}
/**
 * @typedef {import("./{{$models}}").{{jsid $model -}} } {{jsid $model}}
 */
{{- end}}{{end}}
{{- end}}
{{end}}
{{- if $imports.Internal}}
{{- $typedefs := false}}
import {
    {{- $first := true}}
    {{- range $model, $class := $imports.Internal}}
        {{- if $class}}
            {{- if not $first}}, {{end}}{{$first = false}}
            {{- jsid $model}}
        {{- else}}
            {{- $typedefs = true}}
        {{- end}}
    {{- end -}}
} from "./{{$internal}}";
{{- if $typedefs}}

{{range $model, $class := $imports.Internal}}{{if not $class}}
/**
 * @typedef {import("./{{$internal}}").{{jsid $model -}} } {{jsid $model}}
 */
{{- end}}{{end}}
{{- end}}
{{end}}
{{- range $model := .Models}}

{{- $isEnum := $model.Values}}
{{- $isClassAlias := and $model.Type (isclass $model.Type)}}
{{- $isTypeAlias := and $model.Type (not (isclass $model.Type))}}
{{- $isStructAlias := and $model.Fields $model.Alias}}
{{- $isClass := and $model.Fields (not $model.Alias)}}

{{- if or $model.Doc $isEnum $isTypeAlias $isStructAlias}}
/**
{{- if $model.Doc}}
{{- jsdoc $model.Doc.Text ""}}
{{- end}}
{{- if $isEnum}}
 * @readonly
 * @enum { {{- jstype $model.Type $imports $collector -}} }
{{- else if $isTypeAlias}}
 * @typedef { {{- jstype $model.Type $imports $collector -}} } {{jsid $model.Name}}
{{- else if $isStructAlias}}
 * @typedef { { {{- range $i, $group := $model.Fields}}{{range $j, $field := $group}}
 {{- if and (ne $i 0) (eq $j 0)}}
 *{{end}}
 *     "{{js $field.Name}}"{{if $field.Optional}}?{{end}}: {{jstype $field.Type $imports $collector}},
 * } }{{end}}{{end}} {{jsid $model.Name}}
{{- end}}
 */
{{- end}}
{{- if $isEnum}}
export const {{jsid $model.Name}} = {
    {{- range $i, $group := $model.Values}}{{range $j, $sgroup := $group}}{{range $k, $value := $sgroup}}
    {{- if and (ne $i 0) (ne $j 0) (eq $k 0)}}
{{end}}
    {{- if or (and (eq $j 0) (eq $k 0) $value.Group.Group.Doc) (and (eq $k 0) $value.Group.Doc) $value.Doc}}{{if gt $k 0}}
{{end}}
    /**
    {{- if and (eq $j 0) $value.Group.Group.Doc}}
    {{- jsdoc $value.Group.Group.Doc.Text "    "}}{{if or (and (eq $k 0) $value.Group.Doc) $value.Doc}}
     *{{end}}
    {{- end}}
    {{- if and (eq $k 0) $value.Group.Doc}}
    {{- jsdoc $value.Group.Doc.Text "    "}}{{if $value.Doc}}
     *{{end}}
    {{- end}}
    {{- if $value.Doc}}
    {{- jsdoc $value.Doc.Text "    "}}
    {{- end}}
     */
    {{- end}}
    {{jsid $value.Name}}: {{jsvalue $value.Value}},
    {{- end}}{{end}}{{end}}
};
{{else if $isClassAlias}}
export const {{jsid $model.Name}} = {{jstype $model.Type $imports $collector}};
{{else if $isClass}}
export class {{jsid $model.Name}} {
    /**
     * Creates a new {{jsid $model.Name}} instance.
     * @param {Partial<{{jsid $model.Name}}>} [source = {}] - The source object to create the {{jsid $model.Name}}.
     */
    constructor(source = {}) {
    {{- range $group := $model.Fields}}{{range $i, $field := $group}}
        {{- /*
            In JS we need to set all properties explicitly
            because JSDoc has no support for arbitrary property names yet.
            See https://github.com/jsdoc/jsdoc/issues/1468

            For optional fields we make the initialization code unreachable
            and cast the false condition to any to prevent any complaint from Typescript.
        */}}
        if ({{if $field.Optional}}/** @type {any} */(false){{else}}!("{{js $field.Name}}" in source){{end}}) {
            /**
            {{- if and (eq $i 0) $field.Group.Doc}}
            {{- jsdoc $field.Group.Doc.Text "            "}}{{if $field.Doc}}
             *{{end}}
            {{- end}}
            {{- if $field.Doc}}
            {{- jsdoc $field.Doc.Text "            "}}
            {{- end}}
             * @member
             * @type { {{- jstype $field.Type $imports $collector}}{{if .Optional}} | undefined{{end -}} }
             */
            this["{{js $field.Name}}"] = {{jsdefault $field.Type $imports $collector $field.Quoted false}};
        }
    {{- end}}{{end}}

        Object.assign(this, source);
    }

    /**
     * Creates a new {{jsid $model.Name}} instance from a string or object.
     * @param {string | object} source
     * @returns { {{- jsid $model.Name -}} }
     */
    static createFrom(source = {}) {
        let parsedSource = typeof source === 'string' ? JSON.parse(source) : source;
        {{- range $i, $group := $model.Fields}}{{range $j, $field := $group}}
        {{- $tgt := (printf "parsedSource[\"%s\"]" (js $field.Name))}}
        {{- jscreate
            (printf "\"%s\" in parsedSource" (js $field.Name))
            $tgt $tgt
            $field.Type $imports $collector
            $field.Quoted false "        "
        }}
        {{- end}}{{end}}
        return new {{jsid $model.Name}}(/** @type {Partial<{{jsid $model.Name}}>} */(parsedSource));
    }
}
{{else}}
{{end}}{{end -}}
